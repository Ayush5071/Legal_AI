import express from 'express';
import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const router = express.Router();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create documents directory if it doesn't exist
const documentsDir = path.join(__dirname, '..', 'public', 'documents');
if (!fs.existsSync(documentsDir)) {
  fs.mkdirSync(documentsDir, { recursive: true });
}

// Serve static files from the documents directory
router.use('/documents', express.static(documentsDir));

router.post('/generate', async (req, res) => {
  try {
    const { conversation, answers } = req.body;
    // Validate input
    if (!Array.isArray(conversation) || typeof answers !== 'object' || answers === null) {
      return res.status(400).json({ error: 'Invalid request: conversation must be an array and answers must be an object.' });
    }

    const doc = new PDFDocument();
    const fileName = `legal-consultation-${Date.now()}.pdf`;
    const filePath = path.join(documentsDir, fileName);

    // Create write stream
    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

    // Add header
    doc.fontSize(24).text('Legal Consultation Summary', { align: 'center' });
    doc.moveDown();

    // Add initial answers
    doc.fontSize(16).text('Initial Information', { underline: true });
    doc.moveDown();
    doc.fontSize(12).text(`Type of Legal Assistance: ${answers[1]}`);
    doc.text(`Case Status: ${answers[2]}`);
    doc.text(`Preferred Language: ${answers[3]}`);
    doc.moveDown();

    // Add conversation
    doc.fontSize(16).text('Consultation Details', { underline: true });
    doc.moveDown();

    conversation.forEach((message, index) => {
      if (message.type === 'user') {
        doc.fontSize(12).text(`Question ${index + 1}:`, { continued: true })
           .text(` ${message.content}`, { underline: true });
      } else {
        doc.fontSize(12).text(`Response: ${message.content}`);
        if (message.followUpQuestions) {
          doc.moveDown(0.5);
          doc.text('Suggested Follow-up Questions:', { underline: true });
          message.followUpQuestions.forEach(q => {
            doc.text(`â€¢ ${q.question}`);
          });
        }
      }
      doc.moveDown();
    });

    // Add footer
    doc.fontSize(10)
       .text('Generated by Legal AI Assistant', { align: 'center' })
       .text(new Date().toLocaleDateString(), { align: 'center' });

    // Finalize PDF
    doc.end();

    writeStream.on('finish', () => {
      res.json({
        pdfUrl: `/api/document/documents/${fileName}`
      });
    });

    writeStream.on('error', (error) => {
      console.error('Error writing PDF:', error);
      res.status(500).json({ error: 'Failed to generate PDF' });
    });

  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ error: error.message || 'Failed to generate PDF' });
  }
});

export default router;
