# Use Node.js LTS version as base image
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install system dependencies including Python, Tesseract, and build tools
RUN apk update && apk add --no-cache \
    python3 \
    py3-pip \
    python3-dev \
    tesseract-ocr \
    tesseract-ocr-data-eng \
    tesseract-ocr-data-spa \
    tesseract-ocr-data-fra \
    tesseract-ocr-data-deu \
    tesseract-ocr-data-ita \
    tesseract-ocr-data-por \
    build-base \
    gcc \
    g++ \
    make \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    ttf-freefont \
    fontconfig \
    && rm -rf /var/cache/apk/*

# Create symbolic link for python command
RUN ln -sf python3 /usr/bin/python

# Copy Python requirements and install Python dependencies
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy package.json and package-lock.json (if available)
COPY package*.json ./

# Install Node.js dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy application code
COPY . .

# Create directories for file uploads and temp files
RUN mkdir -p /app/public/documents /app/public/temp

# Set environment variables
ENV NODE_ENV=production
ENV TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata/
ENV TESSERACT_CMD=/usr/bin/tesseract

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Change ownership of app directory to nodejs user
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js || exit 1

# Start the application
CMD ["node", "server.js"]